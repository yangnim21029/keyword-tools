import { NextResponse } from 'next/server';
import { generateStructuredContentWithAltText } from '../../../actions/writing-actions';

// The extractH2Headings function is no longer needed as the action returns JSON directly.
/*
 * Parses a string containing H2/H3 headings and extracts only the H2 headings.
 * @param content The string content generated by generateStructuredContentWithAltText.
 * @returns An array of strings, where each string is an H2 heading.
 */
/*
function extractH2Headings(content: string): string[] {
    if (!content) {
        return [];
    }
    const lines = content.split('\n');
    const h2Headings = lines
        .map(line => line.trim())
        .filter(line => line.startsWith('H2 ')); // Filter lines starting with "H2 "
        // Optionally remove the "H2 " prefix if needed:
        // .map(line => line.substring(3).trim());
    return h2Headings;
}
*/

export async function POST(req: Request) {
    try {
        const body = await req.json();
        // Extract keyword, language, and region
        const { keyword, language, region, targetWebsites } = body;

        if (!keyword) {
            return NextResponse.json({ error: 'Missing keyword' }, { status: 400 });
        }
        if (!language) {
            return NextResponse.json({ error: 'Missing language' }, { status: 400 });
        }
        if (!region) {
            return NextResponse.json({ error: 'Missing region' }, { status: 400 });
        }
        if (targetWebsites !== undefined && 
            (!Array.isArray(targetWebsites) || !targetWebsites.every(item => typeof item === 'string'))) {
            return NextResponse.json({ error: 'Invalid targetWebsites format. It should be an array of strings.' }, { status: 400 });
        }

        console.log(`[API Outline] Received: keyword=${keyword.substring(0, 50)}..., lang=${language}, region=${region}, targets=${targetWebsites ? targetWebsites.join('|') : 'N/A'}`);

        // Call the action function with all required parameters
        const outlineJsonObject = await generateStructuredContentWithAltText(keyword, language, region, targetWebsites);

        console.log(`[API Outline] Received JSON object from action.`);

        // Return the JSON object directly
        return NextResponse.json(outlineJsonObject, { status: 200 });

    } catch (error: any) {
        console.error("[API Outline] Error:", error);
        return NextResponse.json(
            { error: "Failed to generate outline", details: error.message }, 
            { status: 500 }
        );
    }
}
